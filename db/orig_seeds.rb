# frozen_string_literal: true

Author.create!([
  {:id=>1, :name=>"Debrah Vandervort", :reputation=>0, :gold=>1, :silver=>10, :bronze=>21, :gravatar_url=>"https://www.gravatar.com/avatar/88145222?s=48&d=identicon&r=PG"},
  {:id=>2, :name=>"Rep. Aldo Hayes", :reputation=>0, :gold=>4, :silver=>1, :bronze=>0, :gravatar_url=>"https://www.gravatar.com/avatar/99204635?s=48&d=identicon&r=PG"},
  {:id=>3, :name=>"Melissa Satterfield III", :reputation=>0, :gold=>3, :silver=>10, :bronze=>48, :gravatar_url=>"https://www.gravatar.com/avatar/55247490?s=48&d=identicon&r=PG"},
  {:id=>4, :name=>"Sen. Patrica Grimes", :reputation=>0, :gold=>0, :silver=>11, :bronze=>37, :gravatar_url=>"https://www.gravatar.com/avatar/30695441?s=48&d=identicon&r=PG"},
  {:id=>5, :name=>"Deshawn O'Hara", :reputation=>0, :gold=>5, :silver=>9, :bronze=>4, :gravatar_url=>"https://www.gravatar.com/avatar/95940797?s=48&d=identicon&r=PG"},
  {:id=>6, :name=>"Kenny Reynolds", :reputation=>0, :gold=>1, :silver=>14, :bronze=>36, :gravatar_url=>"https://www.gravatar.com/avatar/20380119?s=48&d=identicon&r=PG"},
  {:id=>7, :name=>"Sal Schowalter", :reputation=>0, :gold=>3, :silver=>12, :bronze=>0, :gravatar_url=>"https://www.gravatar.com/avatar/98447265?s=48&d=identicon&r=PG"},
  {:id=>8, :name=>"Vanda Toy", :reputation=>0, :gold=>5, :silver=>5, :bronze=>34, :gravatar_url=>"https://www.gravatar.com/avatar/83590655?s=48&d=identicon&r=PG"},
  {:id=>9, :name=>"Alfredo Kreiger", :reputation=>0, :gold=>5, :silver=>13, :bronze=>9, :gravatar_url=>"https://www.gravatar.com/avatar/19546421?s=48&d=identicon&r=PG"},
  {:id=>10, :name=>"Dr. Quinn Stamm", :reputation=>0, :gold=>1, :silver=>6, :bronze=>44, :gravatar_url=>"https://www.gravatar.com/avatar/83087630?s=48&d=identicon&r=PG"},
  {:id=>11, :name=>"Prof. Ruthie Ebert", :reputation=>0, :gold=>0, :silver=>15, :bronze=>28, :gravatar_url=>"https://www.gravatar.com/avatar/39742395?s=48&d=identicon&r=PG"},
  {:id=>12, :name=>"Pearl Mertz", :reputation=>0, :gold=>5, :silver=>12, :bronze=>6, :gravatar_url=>"https://www.gravatar.com/avatar/71821572?s=48&d=identicon&r=PG"},
  {:id=>13, :name=>"Mr. Rocco Corkery", :reputation=>0, :gold=>4, :silver=>14, :bronze=>29, :gravatar_url=>"https://www.gravatar.com/avatar/50245840?s=48&d=identicon&r=PG"},
  {:id=>14, :name=>"Claudia Pagac II", :reputation=>0, :gold=>3, :silver=>5, :bronze=>28, :gravatar_url=>"https://www.gravatar.com/avatar/16444240?s=48&d=identicon&r=PG"},
  {:id=>15, :name=>"Rep. Enoch Kerluke", :reputation=>0, :gold=>2, :silver=>14, :bronze=>41, :gravatar_url=>"https://www.gravatar.com/avatar/93188133?s=48&d=identicon&r=PG"},
  {:id=>16, :name=>"Jake Macejkovic", :reputation=>0, :gold=>5, :silver=>0, :bronze=>26, :gravatar_url=>"https://www.gravatar.com/avatar/60920599?s=48&d=identicon&r=PG"},
  {:id=>17, :name=>"Miss Joline West", :reputation=>0, :gold=>1, :silver=>7, :bronze=>11, :gravatar_url=>"https://www.gravatar.com/avatar/81811582?s=48&d=identicon&r=PG"},
  {:id=>18, :name=>"Earle Wuckert", :reputation=>0, :gold=>5, :silver=>8, :bronze=>34, :gravatar_url=>"https://www.gravatar.com/avatar/27429699?s=48&d=identicon&r=PG"},
  {:id=>19, :name=>"Hiedi Mohr", :reputation=>0, :gold=>1, :silver=>1, :bronze=>8, :gravatar_url=>"https://www.gravatar.com/avatar/92059508?s=48&d=identicon&r=PG"},
  {:id=>20, :name=>"Erminia Rau DO", :reputation=>0, :gold=>1, :silver=>5, :bronze=>5, :gravatar_url=>"https://www.gravatar.com/avatar/33894798?s=48&d=identicon&r=PG"},
  {:id=>21, :name=>"Elda McLaughlin DC", :reputation=>0, :gold=>3, :silver=>18, :bronze=>20, :gravatar_url=>"https://www.gravatar.com/avatar/90133171?s=48&d=identicon&r=PG"},
  {:id=>22, :name=>"Oren Graham", :reputation=>0, :gold=>2, :silver=>14, :bronze=>14, :gravatar_url=>"https://www.gravatar.com/avatar/77619091?s=48&d=identicon&r=PG"},
  {:id=>24, :name=>"Ross Hunter", :reputation=>9000, :gold=>5, :silver=>6, :bronze=>33, :gravatar_url=>"https://avatars.githubusercontent.com/u/243033?v=4"},
  {:id=>25, :name=>"Erin Van Maanen", :reputation=>0, :gold=>3, :silver=>7, :bronze=>21, :gravatar_url=>"https://media-exp1.licdn.com/dms/image/C5603AQGl02w6a_5NDQ/profile-displayphoto-shrink_200_200/0/1592331912803?e=1674086400&v=beta&t=CADneHkhxs2RAAUzCar9AKkbu--guUKewRV5p5du_Os"},
  {:id=>26, :name=>"Amanda Mulder", :reputation=>0, :gold=>5, :silver=>15, :bronze=>40, :gravatar_url=>"https://twentyliters.wpenginepowered.com/wp-content/uploads/2020/02/Amanda-scaled-e1581690349369.jpg"}
])

Tag.create!([
  {:id=>1, :name=>"api", :description=>"DO NOT USE. Use specific tags like [google-cloud-platform], [facebook], [amazon-web-services] instead or [api-design] where applicable. Questions asking to recommend or find an API are off-topic.", :score=>36},
  {:id=>2, :name=>"actioncontroller", :description=>"ActionController is the main controller class in Ruby on Rails.", :score=>0},
  {:id=>3, :name=>"actionmailer", :description=>"Action Mailer is a framework for designing email service layers. Original ActionMailer is written in Ruby, but there is also implementation for ASP.NET MVC.", :score=>0},
  {:id=>4, :name=>"actiontext", :description=>"Action Text brings rich text content and editing to Rails. Rich text content generated by the Trix editor is saved in its own RichText model that's associated with any existing Active Record model in the application. Any embedded images (or other attachments) are automatically stored using Active Storage and associated with the included RichText model.", :score=>18},
  {:id=>5, :name=>"activerecord", :description=>"The implementation of object-relational mapping (ORM) using the Active Record pattern in the Ruby on Rails framework.", :score=>0},
  {:id=>6, :name=>"ajax", :description=>"AJAX (Asynchronous JavaScript and XML) is a technique for creating interactive website user interfaces without the traditional web page refresh or reload. It uses asynchronous data exchange between client and server to update displayed information and respond to user interactions seamlessly. Include additional tags for programming languages, libraries, frameworks, web browsers, protocols and other environmental information.", :score=>36},
  {:id=>7, :name=>"association", :description=>"ssociations typically refer to relationships between models in ORMs such as ActiveRecord.", :score=>22},
  {:id=>8, :name=>"authentication", :description=>"\nAuthentication is the process of providing a proof of identity or verifying identity.", :score=>18},
  {:id=>9, :name=>"capybara", :description=>"Capybara is a web application testing framework for Rack applications, such as Rails, Sinatra and Merb.", :score=>18},
  {:id=>10, :name=>"coffeescript", :description=>"CoffeeScript is a language that compiles into JavaScript. Underneath all of those embarrassing braces and semicolons, JavaScript has always had a gorgeous object model at its heart. CoffeeScript is an attempt to expose the good parts of JavaScript in a simple way.", :score=>18},
  {:id=>11, :name=>"config", :description=>"Config files configure the initial settings for some computer programs", :score=>40},
  {:id=>12, :name=>"css", :description=>"CSS (Cascading Style Sheets) is a representation style sheet language used for describing the look and formatting of HTML (HyperText Markup Language), XML (Extensible Markup Language) documents and SVG elements including (but not limited to) colors, layout, fonts, and animations. It also describes how elements should be rendered on screen, on paper, in speech, or on other media.", :score=>18},
  {:id=>13, :name=>"database-design", :description=>"Database design is the process of specifying the structure and thus the logical aspects of a database. The goal of database design is to make a representation of some \"universe of discourse\" - the types of facts, business rules and other requirements that the database is intended to model.", :score=>58},
  {:id=>14, :name=>"database-schema", :description=>"A description of the structure of the database - including the structure of the tables, columns, constraints, views, etc, etc... that make up the database.Normally defined in the text, generally SQL in an RDBMS, the schema describes the complete blueprint for the database, defining everything about the database except that data itself.", :score=>76},
  {:id=>15, :name=>"datatables", :description=>"DataTables is a plug-in for the jQuery JavaScript library. It is a highly flexible tool, based upon the foundations of progressive enhancement, which will add advanced interaction controls to any HTML table. ", :score=>18},
  {:id=>16, :name=>"devise", :description=>"Devise is an authentication gem for Ruby-on-Rails. It supersedes previous solutions such as Restful Authentication or Authlogic.", :score=>18},
  {:id=>17, :name=>"gmail-api", :description=>"Use the Gmail API to add Gmail features to your app. RESTful access to threads, messages, labels, drafts and history. Easy to use from modern web languages.", :score=>0},
  {:id=>18, :name=>"google-api", :description=>"Use for questions about various Google APIs. The APIs are usually based on popular Google consumer products, including Cloud Platform, Google Maps, Google Earth, AdSense, Adwords, Google Apps, and YouTube. Do not use for API client library questions.", :score=>18},
  {:id=>19, :name=>"html", :description=>"HTML (HyperText Markup Language) is the markup language for creating web pages and other information to be displayed in a web browser. This tag is rarely used alone and is often paired with [CSS] and [JavaScript].", :score=>18},
  {:id=>20, :name=>"javascript", :description=>"For questions about programming in ECMAScript (JavaScript/JS) and its different dialects/implementations (except for ActionScript).", :score=>40},
  {:id=>21, :name=>"jquery", :description=>"jQuery is a popular cross-browser JavaScript library that facilitates Document Object Model (DOM) traversal, event handling, animations and AJAX interactions by minimizing the discrepancies across browsers.", :score=>18},
  {:id=>22, :name=>"json", :description=>"JSON (JavaScript Object Notation) is a serializable data interchange format that is a machine and human readable.", :score=>36},
  {:id=>23, :name=>"postgresql", :description=>"PostgreSQL is an open-source, relational database management system (RDBMS) available for all major platforms, including Linux, UNIX, Windows and OS X", :score=>36},
  {:id=>24, :name=>"rake", :description=>"Ruby build utility similar to make with build commands defined in pure Ruby.", :score=>0},
  {:id=>25, :name=>"redis", :description=>"Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker. It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes with radius queries and streams. It also provides pub-sub capabilities. ", :score=>36},
  {:id=>26, :name=>"rspec", :description=>"RSpec is a behavior-driven development (BDD) framework for the Ruby programming language, inspired by JBehave. It contains its own fully integrated mocking framework based upon JMock. The framework can be considered a domain-specific language (DSL) and resembles a natural language specification.", :score=>18},
  {:id=>27, :name=>"ruby", :description=>"Ruby is a multi-platform open-source, dynamic object-oriented interpreted language. The [ruby] tag is for questions related to the Ruby language, including its syntax and its libraries.", :score=>58},
  {:id=>28, :name=>"ruby-on-rails", :description=>"Ruby on Rails is an open source full-stack web application framework written in Ruby. It follows the popular MVC framework model and is known for its \"convention over configuration\" approach to application development.", :score=>36},
  {:id=>29, :name=>"sidekiq", :description=>"Sidekiq is a background processing framework for Ruby.", :score=>18},
  {:id=>30, :name=>"xml", :description=>"XML (Extensible Markup Language) is a structured document format defining text encoding rules. When using this tag include additional tags such as programming language, tool sets, XML technologies being used, and other tags describing the environment of the problem posted. XML flexibility lends to a wide variety of uses for human and machine data transfer so be specific as to tools and libraries.", :score=>18},
  {:id=>31, :name=>"stimulus", :description=>"Stimulus is a JavaScript framework with modest ambitions. It's designed to augment your HTML with just enough behavior to make it shine. Stimulus pairs beautifully with Turbo to provide a complete solution for fast, compelling applications with a minimal amount of effort.", :score=>0},
  {:id=>32, :name=>"hotwire", :description=>"Hotwire is an alternative approach to building modern web applications without using much JavaScript by sending HTML instead of JSON over the wire. ", :score=>0},
  {:id=>33, :name=>"turbolinks", :description=>"\nTurbolinks makes following links in your web application faster. Instead of letting the browser recompile the JavaScript and CSS between each page change, it keeps the current page instance alive and replaces only the body and the title in the head.", :score=>0},
  {:id=>34, :name=>"turbo-frames", :description=>"Turbo Frames decompose pages into independent contexts, which scope navigation and can be lazily loaded", :score=>0},
  {:id=>35, :name=>"turbo-drive", :description=>"Turbo Drive accelerates links and form submissions by negating the need for full page reloads.", :score=>0},
  {:id=>36, :name=>"turbo-streams", :description=>"Turbo Streams deliver page changes over WebSocket, SSE or in response to form submissions using just HTML and a set of CRUD-like actions.", :score=>0}
])

Post.create!([
  {:id=>1, :author_id=>1, :title=>"How did Chip learn to code? I don't see a CS degree on his resume.", :title_slug=>"How-Chip-learn-code-I-dont", :body=>"<div>How can one learn about Computer Science if one does not attend an accredited university?</div>", :question_id=>nil, :accepted=>false, :views=>163, :votes=>83, :rank=>412, :published_at=>"2022-10-31 20:07:50 UTC"},
  {:id=>2, :author_id=>2, :title=>nil, :title_slug=>"", :body=>"<div><strong>By the numbers:<br></strong><br></div><ul><li>2009: Chip got good a Microsoft Access and VBA while working for the Red Cross </li><li>2010: Chip learned MySQL and PHP to deploy WAMP stacks to get his databases into an online format</li><li>2011: Mark introduced Chip to Ruby on Rails at the first Grand Rapids GiveCamp</li><li>2012: Chip cut his teeth on an inventory app for the Red Cross (with help from GiveCamp)</li><li>2015: Chip launched his first solo web app: a time management and tracking site for grant-based work for the Refugee Education Center</li><li>2017: Code for Good helped Chip spin up an event registration app for 20 Liters (filterbuildscheduler), Chip finished it up and deployed it in less than 3 months</li><li>2017: Chip wrote his first API to take a JSON payload from a Stripe Webhook and use it to create a donation record in 20 Liters' donor CRM via their API</li><li>2018: Chip added a complex inventory module to filterbuildscheduler that used event results to automatically update inventory counts</li><li>2019: Chip again worked with Code for Good to deploy a program reporting and micro-blogging application for 20 Liters (liters_tracker)</li><li>2019: Chip wrote a project management app for Family Promise of West Michigan that included API integration with Google Tasks and Calendar</li><li>2020: Chip turned his fully-fledged project management app for Family Promise into a simple app that integrated with and extended the functionality of Google Tasks</li><li>2021: Chip built a Gmail API service into filterbuildscheduler so that emails between 20 Liters staff and donors are recorded in their donor CRM</li></ul><div><br><strong>From the earliest days:<br></strong>In High School math classes, Chip learned he could program algebraic equations into his TI-86 calculator. Equations he was <em>supposed</em> to memorize for tests.<br><br>While at the American Red Cross, Chip's Microsoft Office skills progressed from basic Excel usage to complex Excel functions to VBA for Excel to MS Access.<br>Getting those Access programs onto the internet led to Chip installing WAMP and LAMP stacks, and assigning network ports. It also meant he had to learn PHP and MySQL.<br><br>Chip was fascinated by what was possible, but frankly, disliked almost everything he was working with. When writing SQL queries is the best part, something is wrong.<br><br>Then, in 2011, one of Chip's colleagues heard about the first-ever Grand Rapids GiveCamp event and asked if Chip had any project ideas. That first weekend-long coding session was a life-changer for Chip. Not only was the Mutually Human team really fun to be around, but they actually let Chip help by doing QA testing. A few members of the team, especially Mark Van Holstyn, encouraged Chip that he could learn Ruby on Rails and pointed him to a lot of great resources.<br><br>From then on, Chip has been coding in the evenings and on weekends, stumbling through new concepts and technologies, getting really good at Rails and not too bad at Ruby.<br><br>When Chip is feeling the perfect mix of cocky and inspired, he dives into StackOverflow and does his best to answer every newly posted Ruby-related question. He remembers how much SO helped him out when he would get stuck, or lost, or off the rails and he wants to give back.</div>", :question_id=>1, :accepted=>true, :views=>4, :votes=>27, :rank=>82, :published_at=>"2022-11-04 01:46:01 UTC"},
  {:id=>3, :author_id=>3, :title=>"What does Chip know about client-side, front end stuff?", :title_slug=>"What-Chip-know-clientside-front-end", :body=>"<div>Ruby on Rails is good at generating vanilla HTML and JSON, but a good website requires visual appeal, intuitive interactions, and a reliably positive user experience.<br><br>How does Chip rate his own front-end abilities?</div>", :question_id=>nil, :accepted=>false, :views=>83, :votes=>41, :rank=>104, :published_at=>"2022-10-30 04:18:49 UTC"},
  {:id=>4, :author_id=>4, :title=>nil, :title_slug=>"", :body=>"<div>As a solo developer, Chip had to interact with the whole stack. It's great that Ruby on Rails just handles the server and data flow <a href=\"https://www.techopedia.com/definition/14261/automagically\">automagically</a>, but if the site looks terrible and is difficult to navigate even the developer won't want to use it.<br><br>In the early days of Rails 3, Chip tasked himself with writing most of his own CSS so as to better understand the concepts.<br>Rails (and Ruby even more so) seemed like it could be very mysterious \"under the hood\" and Chip wanted to take a different approach with CSS: learn the hard way instead of relying on magic methods.<br><br>Chip doesn't always choose to learn via the lower-level instead of the higher, more abstracted path. Some abstractions help by removing pain; some only delay pain:</div><ul><li>He got comfortable with jQuery before tackling Javascript</li><li>He used CoffeeScript for much longer than he probably should have</li><li>He discovered Haml and hasn't looked back (or at raw HTML if he can avoid it)</li></ul><div><br>These experiences taught him when to utilize abstraction layers and when to roll up your sleeves.<br><br>Chip has used a lot of tools for front-end work:</div><ul><li>Boostrap (v1.3 and up)</li><li>Material (Google's confidently named blue ribbon)</li><li>Stacks (ala StackOverflow, for this little project)</li><li>Stimulus (learned it just for this!)</li><li>Rails UJS (he really loved and misses it)</li><li>JQuery (maybe too much)</li><li>Datatables</li><li>ActionText</li><li>SimpleForm</li></ul><div>... and probably a few more he's either forgotten about to the sands of time.</div><div><br>And at the more base-level Chip is comfortable enough with client-side tools to ingest data from an API, add Javascript-based interactive elements, draw SVGs, and even make some flexboxes and grids.</div><div><br>As many can attest, however, knowing <strong>how</strong> to do art is <strong><em>not</em></strong> the same as <strong>being</strong> an artist.<br><br>Chip is more akin to Randal Monroe than Bob Ross. Somebody else better tell him where to put the happy little trees.</div>", :question_id=>3, :accepted=>true, :views=>44, :votes=>27, :rank=>76, :published_at=>"2022-10-30 09:19:11 UTC"},
  {:id=>5, :author_id=>5, :title=>"What experience does Chip have with server-side tech?", :title_slug=>"What-experience-Chip-serverside-tech", :body=>"<div>Chip has already said he's not a prodigy designer, so if he's not a <strong>front-end</strong> wizard, how are his <strong>back-end</strong> skills? </div>", :question_id=>nil, :accepted=>false, :views=>32, :votes=>16, :rank=>18, :published_at=>"2022-10-31 19:00:57 UTC"},
  {:id=>6, :author_id=>6, :title=>"How will Chip perform as a part of a team?", :title_slug=>"How-Chip-perform-part", :body=>"<div>Slinging code like a 10x developer is great and all, but we're hiring someone to work on a team.<br><br>Us Hiring Managers have a joke we tell about two applicants:<br><em>\"Tom may be technically inept, but the other candidate is an a**hole and Tom can be trained.\"<br><br></em>What are we getting ourselves into if we hire Chip?</div>", :question_id=>nil, :accepted=>false, :views=>44, :votes=>17, :rank=>10, :published_at=>"2022-10-24 06:41:08 UTC"},
  {:id=>7, :author_id=>7, :title=>"How does Chip ask for help? What does he do when he gets stuck?", :title_slug=>"How-Chip-ask-help-What", :body=>"<div>Being the new member of a team comes with lots to learn. There's a risk that Chip will interrupt the flow of the team while he catches up.</div>", :question_id=>nil, :accepted=>false, :views=>40, :votes=>13, :rank=>8, :published_at=>"2022-11-04 13:41:39 UTC"},
  {:id=>8, :author_id=>8, :title=>"Are there any specific pieces of code Chip would like to show off?", :title_slug=>"Are-there-specific-pieces-code-Chip", :body=>"<div>Anything he's particularly proud of?</div>", :question_id=>nil, :accepted=>false, :views=>44, :votes=>10, :rank=>24, :published_at=>"2022-10-30 14:30:58 UTC"},
  {:id=>9, :author_id=>9, :title=>"What's the test coverage like on Chip's applications? How and when does he write tests?", :title_slug=>"Whats-the-test-coverage-like-on-Chips-applications", :body=>"<pre># TODO: write a test for this question.</pre>", :question_id=>nil, :accepted=>false, :views=>39, :votes=>14, :rank=>11, :published_at=>"2022-11-02 12:40:10 UTC"},
  {:id=>10, :author_id=>10, :title=>"Has Chip ever contributed to the software community either online or locally?", :title_slug=>"Has-Chip-ever-contributed-the-software-community", :body=>"<div>We recognize that Chip hasn't exactly worked in the sector before, but we thought we'd ask.</div>", :question_id=>nil, :accepted=>false, :views=>24, :votes=>8, :rank=>9, :published_at=>"2022-10-22 14:48:10 UTC"},
  {:id=>11, :author_id=>11, :title=>nil, :title_slug=>"", :body=>"<div>If Chip could focus on one end of the stack, he much prefers the server side.<br><br>When Chip wanted to put his Access databases online, he stumbled into the depressing world of WAMP and LAMP stacks.<br>Even though the learning curve was steep, he mastered enough MySQL and PHP to get his data to the client-side.<br><br>PHP was the aggravating part. What he enjoyed was learning about the data structures, types and queries he could run to create, access and transform his data.<br>Discovering Ruby on Rails <em>(thanks Mark!)</em> was a huge leap forward, especially because ActiveRecord is such a nice abstraction layer above raw SQL for almost anything you need.<br><br>Besides, focusing on Models, Controllers, and Jobs is just way more rewarding than tweaking views.<br><br>Chip's first few apps were standard Rails web frameworks (starting with Rails 3), then <a href=\"https://ross-hunter.com/\">Ross Hunter</a> taught him about webhooks and APIs. Chip learned AJAX and JSON as the norm became avoiding full-page loads.<br> <br>And Chip just jumped into Turbo and Stimulus for this portfolio project you're looking at right now.<br><br></div><h1>Chip has experience with:</h1><div><br><strong>Web Frameworks:</strong></div><ul><li>Ruby on Rails (API and web)</li><li>Wordpress</li><li>MS SharePoint (yes, but ew)</li></ul><div><br><strong>Relational Databases:</strong></div><ul><li>MySQL</li><li>SQLite</li><li>Postgres (his favorite)</li></ul><div><br><strong>Datastores:</strong></div><ul><li>File servers</li><li>In-memory stores (Redis)</li><li>Amazon S3</li></ul><div><br><strong>Servers and proxies:</strong></div><ul><li>Apache (from the dark, bitter WAMP/LAMP days)</li><li>Puma</li><li>Unicorn</li><li>Thin</li><li>Foreman</li><li>ngrok</li></ul><div><br><strong>Job services/processors:</strong></div><ul><li>Sidekiq</li><li>Delayed::Job (R.I.P)</li></ul><div><br><strong>Hosting / PaaS:</strong></div><ul><li>Heroku</li><li>Railway</li><li>WPEngine</li></ul>", :question_id=>5, :accepted=>true, :views=>29, :votes=>7, :rank=>7, :published_at=>"2022-11-04 21:50:36 UTC"},
  {:id=>12, :author_id=>12, :title=>nil, :title_slug=>"", :body=>"<div><em>[Credentials]: I've know Chip since I came into existence so I feel pretty confident telling you about him.</em><br><br>Chip loves this question and he's really glad you asked. Chip got his bachelors degree in psychology because he is fascinated by inter- / intrapersonal dynamics.<br><br></div><h1>TL;DR:</h1><div>Chip has lots of diverse teamwork experiences, mostly outside of software development. Chip has been responsible for forming and coordinating teams in a myriad of situations, of various sizes, and for a range of purposes and timeframes.<br><br>Chip much prefers working as part of a team and he believes in being very intentional towards the health and development of the team itself.<br><br></div><h1>The team is always the primary factor</h1><div>Chip believes that the health and strength of the team is usually the main cause of success (or failure). And, while it's natural to assume that the team leader or supervisor is solely responsible for team formation and development, Chip believes that each member of the team is responsible for helping the team develop strong relational bonds. <br><br>Chip has worked on traditional employee / employer teams, served on committees, supervised and led teams, and been responsible for team formation and development.<br><br><strong>Teams facing urgency</strong><br>Chip had the unique experience of managing teams during responses to large-scale disasters.<br>At the American Red Cross, Chip would often have to form teams of mostly volunteers from across the country who had usually never met before. These teams had to be able to function successfully and immediately in order to assist those impacted by the disaster.<br><br>Chip learned to quickly help team members assess their competencies, strengths and needs for the assignment of roles and responsibilities. The whole team needed to be oriented to the goals and Chip learned to ensure that every team member was invested in the success of the team.<br><br>Chip also got his introduction to software because of Grand Rapids Give Camp (Software for Good). He got to work with newly-formed, short-term, long-hours teams of developers and designers.<br><br><strong>Teams under stress<br></strong>During his time working for Pine Rest, Chip experienced being on teams that regularly faced trauma and had to cope with high levels of stress. Chip saw how some teams grew strong because the team members formed, and then were able to rely upon, relational bonds to support each other. This is also where Chip learned that each member of a team has the responsibility of intentionally being honest and supportive of every team member.<br><br><strong>Teams exist for a goal</strong><br>As the majority of his career has been in the nonprofit sector, Chip has been on teams with both volunteers and paid staff. There are often assumptions that volunteers aren't as qualified as paid staff, and that paid staff aren't as committed as volunteers. But Chip  discovered that not only are those assumptions false, they have very little bearing on the success of the team. What mattered more was an individual and collective understanding of the purpose of the team. Teams that know why they were formed and what they need to accomplish are always more likely to be healthy, strong and successful.<br><br><strong>Teams must adapt</strong><br>We live in a society that loves to divine the perfect hierarchy, system, or strategy for team formation and management. I'm guessing you have a few strategies already coming to mind: Agile, Waterfall, XP...<br><br>The more humanistic perspective recognizes that people are:</div><ul><li>Unique</li><li>Adaptable</li><li>Flexible</li></ul><div><br>And, to add another layer of complexity, everyone has varying degrees of adaptability and flexibility.<br>Teams must be malleable concepts, structured in ways that balance the business purposes and goals with the humans that make up the team. And teams need to change over time. Even if the team is still composed of the same people, people change, grow, adapt, experience crises, etc.</div>", :question_id=>6, :accepted=>true, :views=>0, :votes=>1, :rank=>3, :published_at=>"2022-10-31 04:11:11 UTC"},
  {:id=>13, :author_id=>13, :title=>nil, :title_slug=>"", :body=>"<div>Chip was born into the programming world in the golden era of TDD and thus was presented with write-the-test-first design patterns in many tutorials and guides. A practice which chafed at him from early on.<br><br>Chip's main production app, <a href=\"https://make.20liters.org/\">filterbuildscheduler</a>, has nearly complete system, model and job tests. At time of writing: 1,073 passing tests.<br><br>On the other end of the spectrum, Chip only has 462 tests in his other production app: <a href=\"https://track.20liters.org/\">liters_tracker</a>. While the codebase is smaller, the test coverage is also smaller. The main part of the application is a forward-facing stats and story viewer. That part of the app has robust testing coverage. The back-end, data entry and reporting side that is only really touched by 3 people occasionally is lacking in some coverage.<br><br>Instead of writing tests before implementing code, Chip has found it much more comfortable and natural to inject a final review-everything-and-write-tests step into his development-deployment cycle. He has found that performing a final inspection that includes writing tests, cleaning up, fine tuning, and refactoring <em>always </em>leads him to discovering some hidden mistakes, conflicting ideas, unused methods, slow code, etc.<br><br>Chip focuses on writing model method tests, system tests, and tests for jobs or services. He rarely writes view and controller tests. Overall, he believes your testing practices (or even having tests at all) must prove themselves to add practical value in the quality of the process and end result, otherwise, why bother?<br><br></div><div><strong>It's worth noting: </strong>Chip recognizes that owning the entire code base as a solo dev lends itself to various flexibilities that teams working together might not enjoy. First and foremost, <em>Chip is a team player and will set aside his own testing philosophies to adopt the standards and preferences of the team and company.</em></div><div><br>If your interest is piqued, read on for a more nuanced delve into Chip's thinking on this matter.<br>======================================================================<br><br>While TDD seems to Chip like a good moral practice, akin to 6-month dental checks, it often ran afoul of how he approaches software development.<br>The practical use case for TDD is a piece of straight-forward, encapsulated code. When you know exactly what you are about to do, writing a test for it first is very achievable. <br><br></div><pre>I need a new method: Post#has_answers? \r\n1. Write a test:\r\n  A. When a Post is not a question, it should return false\r\n  B. When a Post is a question,\r\n    1. And it has one or more associated answers, it should return true\r\n2. Write the method\r\n3. Ensure the test passes</pre><div><br>But most of the time, Chip starts with a broader scope: \"I want to retrieve, store, occasionally update and present my StackOverflow reputation and badges on this site.\"<br>When starting on this feature, there are a few paths Chip could take and he usually likes to start down one of those paths and see what he finds:<br><br></div><pre>1. Retrieve reputation and badge info from SO profile\r\n  A. Does SO have an open API?\r\n  B. Does SO offer a JSON representation of a profile?\r\n  C. If not A or B, we might have to get and parse the HTML of the SO profile</pre><div>Starting with a specific test at this point is impossible. After doing some research, <a href=\"https://github.com/chiperific/chipoverflow/blob/main/app/jobs/update_reputation_job.rb\">C was the answer</a>.<br><br>We're still not to the level of specificity required of a good test. So Chip starts toying with ideas and trying some strategies. He eventually settles on using Net::HTTP and  Nokogiri in an ApplicationJob, but once he gets into the flow of tinkering and building, he rarely stops moving forward to go write failing tests first.<br><br>Which leads us to Chip's preferences (from his upcoming memoir):</div><ol><li><a href=\"https://www.codewithjason.com/examples-pointless-rspec-tests/\">Don't test what Rails (or Ruby or a gem) does for us</a>.</li><li>Test behaviors, not implementation</li><li>Write tests for what I struggled to get working in the first place</li><li>Write most tests when I think the app is ready for first deployment</li><li>Write tests for everything I add after the app is deployed</li></ol><div><br></div><div>Hometown sweetheart <a href=\"https://www.codewithjason.com/\">Jason Swett</a> uses car repair analogies in lots of his articles on Rails testing, so let me follow suite. <br><br></div><div><strong>Once a car rolls off the assembly line, when the company thinks it's complete, but before it goes to the consumer, it goes through a vigorous safety and function test.</strong></div><div><br>Chip finds himself naturally following these general phases for app development:<br><br></div><ol><li>During scaffolding phases: some model tests, checking for constraints Chip added</li><li>During build-out phases: hardly ever, Chip is trying various strategies and tinkering</li><li>During detailed tuning and completion of specific features: write tests for features that feel duct taped together or in need of tuning or refactoring to make sure they meet the objective, a minimum </li><li>During final sprints: nope, just get the code into the files</li><li>Before initial production deploy: yes, in fact, it's worth adding a whole new step: 6.</li><li><em>App review</em>: Go through every model and test every method. Does it do what I expect? Did my thinking change as the app grew and matured? Is this method still being used? Write a system test to ensure every route actually loads a page and that any critical interactivity on that page is tested (e.g. forms submit successfully and a record is created / changed). Write mailer and job tests to cover all the activity of the app.</li><li>Deployment: add in and setup a continuous integration system.</li><li>Features / improvements / bug fixes after deployment: yes, if any method, view, job, or mailer is added or changed.</li></ol>", :question_id=>9, :accepted=>true, :views=>0, :votes=>0, :rank=>0, :published_at=>"2022-11-05 18:14:33 UTC"},
  {:id=>14, :author_id=>14, :title=>nil, :title_slug=>"", :body=>"<div>Chip feels genuinely lucky that Give Camp / Code for Good has helped Chip launch new apps on four separate occasions. Chip also feels deeply indebted to the software community, <em>and Mutually Human specifically</em>, for introducing him to this hobby that he loves and hopes to turn into a career.<br><br></div><h1>Locally:</h1><div>Chip was <strong>co-president of GR Give Camp</strong> for two years, alongside <a href=\"https://www.linkedin.com/in/jansonhartliep/\">Janson Hartliep</a> if name-dropping is allowed.<br><br><a href=\"https://www.jtower.com/\">J Tower</a> allowed Chip to speak at <strong>Beer City Code</strong> once, where he hosted a talk focused on how so much of the technology we are making has so many unintended consequences and we really don't seem to be very good at anticipating any of them. One person said \"well that was depressing\" on their way out afterwards. Which was mission accomplished in Chip's book. It was called \"The Machines Have Already Begun to Kill Us\".<br><br></div><h1>Online:</h1><div> Since Chip spends so much time scouring Stack Overflow for his own reasons that he likes to reserve a day or two every month to obsessively try and answer a ton of questions, mostly focusing on new users with poorly worded posts.<br><br>Chip has a bleeding heart for the new user and new programmer just reaching out in frustration for anyone to offer any assistance. When it comes to software, we are always novices in the next language, the next pattern, the next practice.<br><br>Chip also writes on <a href=\"https://medium.com/@chiperific\"><strong>Medium</strong></a> when he feels that he solved something that he couldn't find the answer to on Stack Overflow.<br><br>Probably least notably, In 2013, Chip submitted his first PR to an obscure little gem called <a href=\"https://github.com/asanghi/fiscali\">fiscali</a>.</div>", :question_id=>10, :accepted=>true, :views=>0, :votes=>0, :rank=>0, :published_at=>"2022-11-03 14:12:44 UTC"},
  {:id=>15, :author_id=>15, :title=>nil, :title_slug=>"", :body=>"<div>Helping the new team member learn what they need to while maintaining the pace of progress is a challenge.<br>If Chip is disruptive by needing help and assistance all the time, or if Chip just tries to struggle through and isn't able to actually accomplish anything, the result will be the same.<br><br>Asking for help is important, but knowing <strong>when and how</strong> to ask for help can make a difference.<br><br>By first understanding how the team operates, Chip can get a sense of when to seek immediate assistance and when to set his questions aside for later. Can his questions wait for a meeting or briefing? Can he ask someone to schedule some time to help him?<br><br>There's an archetype of a junior developer that asks \"how do I do this?\" without actually trying anything first. This type of hand-holding and solution seeking can be very destructive to the team dynamic. Either the other team member resent and reject this attitude of \"just tell me how to do it\" or they enable it by just, in essence, doing thier work for them.<br><br>On the other hand, there's a risk in trying to solve everything without relying on the team. The risk is wasted time and effort, frustration, and isolationism. The team is hurt by this \"maverick\" who refuses to use the knowledge and expertise of their teammates. When they encounter a problem they can't solve, they will waste time and effort and will probably wind up producing low-quality results.<br><br>The middle way means spending some time trying, searching, and tinkering before asking the team to step in, but also being humble enough to recognize the team already has the needed expertise and brave enough to admit you need help and ask for it.<br><br>There are a few reasons people <strong>don't</strong> ask for help:</div><ul><li>Ego - they don't want to look stupid or weak</li><li>Fear - they think the team will ostracize or look down on them for not knowing</li></ul><div><br>The structure and personality of the team can address these issues proactively. If senior members of the team model asking for help, it normalizes and encourages the behavior. If the routines of the team encourage collaboration, it offers a good timeframe in which to ask questions.<br><br>If the team is social-first, they may prefer that questions be raised as they occur. If the team parses out the work so people can put their heads down and deliver, it may be best to avoid interrupting them during these sprints.<br><br></div><h1>This is a dual responsibility. The team needs to show, and the member needs to learn, how and when to ask questions.</h1>", :question_id=>7, :accepted=>true, :views=>0, :votes=>0, :rank=>0, :published_at=>"2022-11-06 14:20:17 UTC"},
  {:id=>16, :author_id=>16, :title=>nil, :title_slug=>"", :body=>"<div>Funny you should ask.<br><br>Chip went through the code bases of his biggest projects and made a bunch of comments on stuff he thinks shows what he knows and can do.<br>It's almost as if he knew you would ask this question, weird.<br><br></div><h1><a href=\"https://github.com/chiperific/chipoverflow/blob/main/HELLO_INTERVIEWERS.md\">Please take a look</a>.</h1>", :question_id=>8, :accepted=>true, :views=>0, :votes=>0, :rank=>0, :published_at=>"2022-10-31 09:09:21 UTC"},
  {:id=>17, :author_id=>22, :title=>"Who can vouch for Chip?", :title_slug=>"Who-vouch-Chip", :body=>"<div>Is there anyone who likes Chip enough to offer to be a reference on his behalf?</div>", :question_id=>nil, :accepted=>false, :views=>75, :votes=>0, :rank=>75, :published_at=>"2022-11-03 06:47:55 UTC"},
  {:id=>18, :author_id=>24, :title=>nil, :title_slug=>"", :body=>"<div>I'll gladly tell you about Chip.<br><br></div><div>All my contact info is <a href=\"https://ross-hunter.com/\">on my website</a>.</div><div><br></div>", :question_id=>17, :accepted=>false, :views=>0, :votes=>1, :rank=>3, :published_at=>"2022-11-03 12:53:19 UTC"},
  {:id=>19, :author_id=>25, :title=>nil, :title_slug=>"", :body=>"<div>I can speak about Chip as a supervisor and mentor. I also supervised him when he was the I.T. Volunteer for the Refugee Education Center.<br><br><a href=\"mailto:erinevanmaanen@gmail.com\">erinevanmaanen@gmail.com</a> ; 616-643-7807</div>", :question_id=>17, :accepted=>false, :views=>0, :votes=>1, :rank=>3, :published_at=>"2022-11-09 05:05:38 UTC"},
  {:id=>20, :author_id=>26, :title=>nil, :title_slug=>"", :body=>"<div>I've work with Chip at 20 Liters for the last 6 years. Before that, we worked at Red Cross together for 7 years. What do you want to know?</div>", :question_id=>17, :accepted=>false, :views=>0, :votes=>0, :rank=>0, :published_at=>"2022-11-08 19:00:28 UTC"}
])

Comment.create!([
  {:post_id=>1, :body=>"<div>Don't forget about bootcamps!</div>", :votes=>52, :published_at=>"2022-11-03 00:02:55 UTC", :author_id=>17},
  {:post_id=>1, :body=>"<div>I have found that a Google Certificate doesn't <i>actually</i> help me get interviews. :(</div>", :votes=>41, :published_at=>"2022-11-04 01:11:10 UTC", :author_id=>18},
  {:post_id=>1, :body=>"<div>I'd like to see this novice explain big O notation! Ha!</div>", :votes=>5, :published_at=>"2022-11-01 09:28:24 UTC", :author_id=>19},
  {:post_id=>2, :body=>"<div>Wow! When he lists it out like this, Chip has actually been working on tech for a long time.</div>", :votes=>22, :published_at=>"2022-11-05 17:01:09 UTC", :author_id=>20},
  {:post_id=>1, :body=>"<div>Hey, CO is not the place for this kind of critical language. Nobody really understands Big O notation.</div>", :votes=>12, :published_at=>"2022-11-05 15:27:15 UTC", :author_id=>21}
])

PostsTag.create!([
  {:post_id=>1, :tag_id=>7},
  {:post_id=>1, :tag_id=>11},
  {:post_id=>1, :tag_id=>13},
  {:post_id=>1, :tag_id=>14},
  {:post_id=>1, :tag_id=>20},
  {:post_id=>1, :tag_id=>27},
  {:post_id=>3, :tag_id=>1},
  {:post_id=>3, :tag_id=>4},
  {:post_id=>3, :tag_id=>6},
  {:post_id=>3, :tag_id=>10},
  {:post_id=>3, :tag_id=>12},
  {:post_id=>3, :tag_id=>15},
  {:post_id=>3, :tag_id=>19},
  {:post_id=>3, :tag_id=>20},
  {:post_id=>3, :tag_id=>21},
  {:post_id=>3, :tag_id=>22},
  {:post_id=>3, :tag_id=>30},
  {:post_id=>5, :tag_id=>1},
  {:post_id=>5, :tag_id=>8},
  {:post_id=>5, :tag_id=>13},
  {:post_id=>5, :tag_id=>14},
  {:post_id=>5, :tag_id=>16},
  {:post_id=>5, :tag_id=>22},
  {:post_id=>5, :tag_id=>23},
  {:post_id=>5, :tag_id=>25},
  {:post_id=>5, :tag_id=>27},
  {:post_id=>5, :tag_id=>28},
  {:post_id=>5, :tag_id=>29},
  {:post_id=>8, :tag_id=>6},
  {:post_id=>8, :tag_id=>13},
  {:post_id=>8, :tag_id=>14},
  {:post_id=>8, :tag_id=>18},
  {:post_id=>8, :tag_id=>23},
  {:post_id=>8, :tag_id=>25},
  {:post_id=>5, :tag_id=>11},
  {:post_id=>9, :tag_id=>9},
  {:post_id=>9, :tag_id=>14},
  {:post_id=>9, :tag_id=>26},
  {:post_id=>10, :tag_id=>27},
  {:post_id=>10, :tag_id=>28}
])

ActiveRecord::Base.connection.tables.each do |t|
  ActiveRecord::Base.connection.reset_pk_sequence!(t)
end
